-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Scripts where

import Prelude

import Aeson
  ( Aeson
  , aesonNull
  , class DecodeAeson
  , class EncodeAeson
  , decodeAeson
  , encodeAeson
  )
import Aeson.Decode ((</$\>), (</*\>), (</\>), decode, null)
import Aeson.Encode ((>$<), (>/\<), encode, null)
import Control.Lazy (defer)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Newtype (class Newtype, unwrap, wrap)
import Data.Op (Op(Op))
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import FromData (class FromData, genericFromData)
import Record (get)
import ToData (class ToData, genericToData)
import Type.Proxy (Proxy(Proxy))
import Types.ByteArray (ByteArray)
import Types.PlutusData (PlutusData)
import Aeson as Aeson
import Aeson.Decode as D
import Aeson.Encode as E
import Data.Map as Map

newtype Redeemer = Redeemer PlutusData

derive instance Eq Redeemer

instance Show Redeemer where
  show a = genericShow a

instance EncodeAeson Redeemer where
  encodeAeson' x = Aeson.encodeAeson' $ E.encode
    (E.record { getRedeemer: E.value :: _ (PlutusData) })
    { getRedeemer: unwrap x }

instance DecodeAeson Redeemer where
  decodeAeson x = wrap <<< get (Proxy :: Proxy "getRedeemer") <$> D.decode
    (D.record "getRedeemer " { getRedeemer: D.value :: _ (PlutusData) })
    x

derive instance Generic Redeemer _

derive instance Newtype Redeemer _

derive newtype instance ToData Redeemer

derive newtype instance FromData Redeemer

--------------------------------------------------------------------------------

_Redeemer :: Iso' Redeemer PlutusData
_Redeemer = _Newtype

--------------------------------------------------------------------------------

newtype Datum = Datum PlutusData

derive instance Eq Datum

instance Show Datum where
  show a = genericShow a

instance EncodeAeson Datum where
  encodeAeson' x = Aeson.encodeAeson' $
    (defer \_ -> E.encode $ unwrap >$< E.value) x

instance DecodeAeson Datum where
  decodeAeson = defer \_ -> D.decode $ (Datum <$> D.value)

derive instance Generic Datum _

derive instance Newtype Datum _

derive newtype instance ToData Datum

derive newtype instance FromData Datum

--------------------------------------------------------------------------------

_Datum :: Iso' Datum PlutusData
_Datum = _Newtype

--------------------------------------------------------------------------------

newtype ScriptHash = ScriptHash ByteArray

derive instance Eq ScriptHash

instance Show ScriptHash where
  show a = genericShow a

instance EncodeAeson ScriptHash where
  encodeAeson' x = Aeson.encodeAeson' $ E.encode
    (E.record { getScriptHash: E.value :: _ (ByteArray) })
    { getScriptHash: unwrap x }

instance DecodeAeson ScriptHash where
  decodeAeson x = wrap <<< get (Proxy :: Proxy "getScriptHash") <$> D.decode
    (D.record "getScriptHash " { getScriptHash: D.value :: _ (ByteArray) })
    x

derive instance Generic ScriptHash _

derive instance Newtype ScriptHash _

derive newtype instance ToData ScriptHash

derive newtype instance FromData ScriptHash

--------------------------------------------------------------------------------

_ScriptHash :: Iso' ScriptHash ByteArray
_ScriptHash = _Newtype

--------------------------------------------------------------------------------

newtype ValidatorHash = ValidatorHash ByteArray

derive instance Eq ValidatorHash

instance Show ValidatorHash where
  show a = genericShow a

instance EncodeAeson ValidatorHash where
  encodeAeson' x = Aeson.encodeAeson' $
    (defer \_ -> E.encode $ unwrap >$< E.value) x

instance DecodeAeson ValidatorHash where
  decodeAeson = defer \_ -> D.decode $ (ValidatorHash <$> D.value)

derive instance Generic ValidatorHash _

derive instance Newtype ValidatorHash _

derive newtype instance ToData ValidatorHash

derive newtype instance FromData ValidatorHash

--------------------------------------------------------------------------------

_ValidatorHash :: Iso' ValidatorHash ByteArray
_ValidatorHash = _Newtype

--------------------------------------------------------------------------------

newtype DatumHash = DatumHash ByteArray

derive instance Eq DatumHash

instance Show DatumHash where
  show a = genericShow a

instance EncodeAeson DatumHash where
  encodeAeson' x = Aeson.encodeAeson' $
    (defer \_ -> E.encode $ unwrap >$< E.value) x

instance DecodeAeson DatumHash where
  decodeAeson = defer \_ -> D.decode $ (DatumHash <$> D.value)

derive instance Generic DatumHash _

derive instance Newtype DatumHash _

derive newtype instance ToData DatumHash

derive newtype instance FromData DatumHash

--------------------------------------------------------------------------------

_DatumHash :: Iso' DatumHash ByteArray
_DatumHash = _Newtype

--------------------------------------------------------------------------------

newtype MintingPolicyHash = MintingPolicyHash ByteArray

derive instance Eq MintingPolicyHash

instance Show MintingPolicyHash where
  show a = genericShow a

instance EncodeAeson MintingPolicyHash where
  encodeAeson' x = Aeson.encodeAeson' $
    (defer \_ -> E.encode $ unwrap >$< E.value) x

instance DecodeAeson MintingPolicyHash where
  decodeAeson = defer \_ -> D.decode $ (MintingPolicyHash <$> D.value)

derive instance Generic MintingPolicyHash _

derive instance Newtype MintingPolicyHash _

derive newtype instance ToData MintingPolicyHash

derive newtype instance FromData MintingPolicyHash

--------------------------------------------------------------------------------

_MintingPolicyHash :: Iso' MintingPolicyHash ByteArray
_MintingPolicyHash = _Newtype

--------------------------------------------------------------------------------

newtype StakeValidatorHash = StakeValidatorHash ByteArray

derive instance Eq StakeValidatorHash

instance Show StakeValidatorHash where
  show a = genericShow a

instance EncodeAeson StakeValidatorHash where
  encodeAeson' x = Aeson.encodeAeson' $
    (defer \_ -> E.encode $ unwrap >$< E.value) x

instance DecodeAeson StakeValidatorHash where
  decodeAeson = defer \_ -> D.decode $ (StakeValidatorHash <$> D.value)

derive instance Generic StakeValidatorHash _

derive instance Newtype StakeValidatorHash _

derive newtype instance ToData StakeValidatorHash

derive newtype instance FromData StakeValidatorHash

--------------------------------------------------------------------------------

_StakeValidatorHash :: Iso' StakeValidatorHash ByteArray
_StakeValidatorHash = _Newtype
