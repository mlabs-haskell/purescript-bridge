-- File auto generated by purescript-bridge! --
module TestData where

import Prelude

import Aeson (Aeson, aesonNull, class DecodeAeson, class EncodeAeson, decodeAeson, encodeAeson)
import Aeson.Decode ((</$\>), (</*\>), (</\>), decode, null)
import Aeson.Encode ((>$<), (>/\<), encode, null)
import Control.Lazy (defer)
import Data.Generic.Rep (class Generic)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Newtype (unwrap, wrap)
import Data.Op (Op(Op))
import Data.Show.Generic (genericShow)
import Data.Tuple (Tuple(Tuple))
import Data.Tuple.Nested ((/\))
import FromData (class FromData, genericFromData)
import Plutus.Types.DataSchema (ApPCons, Field, I, Id, IxK, MkField, MkField_, MkIxK, MkIxK_, PCons, PNil, PSchema, class HasPlutusSchema, type (:+), type (:=), type (@@))
import ToData (class ToData, genericToData)
import TypeLevel.Nat (S, Z)
import Aeson as Aeson
import Aeson.Decode as D
import Aeson.Encode as E
import Data.Map as Map

data TwoRecords
  = FirstRecord
    { _fra :: String
    , _frb :: Int
    }
  | SecondRecord
    { _src :: Int
    , _srd :: Array Int
    }

instance EncodeAeson TwoRecords where
  encodeAeson' x = Aeson.encodeAeson' $ (defer \_ ->  case _ of
    FirstRecord {_fra, _frb} -> encodeAeson
      { tag: "FirstRecord"
      , _fra: flip E.encode _fra E.value
      , _frb: flip E.encode _frb E.value
      }
    SecondRecord {_src, _srd} -> encodeAeson
      { tag: "SecondRecord"
      , _src: flip E.encode _src E.value
      , _srd: flip E.encode _srd E.value
      } ) x

instance DecodeAeson TwoRecords where
  decodeAeson = defer \_ -> D.decode
    $ D.sumType "TwoRecords" $ Map.fromFoldable
      [ "FirstRecord" /\ (FirstRecord <$> D.object "FirstRecord"
        { _fra: D.value :: _ String
        , _frb: D.value :: _ Int
        })
      , "SecondRecord" /\ (SecondRecord <$> D.object "SecondRecord"
        { _src: D.value :: _ Int
        , _srd: D.value :: _ (Array Int)
        })
      ]

derive instance Generic TwoRecords _

instance Show TwoRecords where
  show a = genericShow a

instance HasPlutusSchema TwoRecords
  ("FirstRecord" :=
     ("_fra" := I String
     :+ "_frb" := I Int
     :+ PNil)
   @@ (Z)
  :+ "SecondRecord" :=
       ("_src" := I Int
       :+ "_srd" := I (Array Int)
       :+ PNil)
     @@ (S (Z))
  :+ PNil)

instance ToData TwoRecords where
  toData x = genericToData x

instance FromData TwoRecords where
  fromData x = genericFromData x
