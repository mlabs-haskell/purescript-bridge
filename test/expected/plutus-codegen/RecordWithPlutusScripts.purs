-- File auto generated by purescript-bridge! --
module TestData where

import Prelude

import Aeson (Aeson, aesonNull, class DecodeAeson, class EncodeAeson, decodeAeson, encodeAeson)
import Aeson.Decode ((</$\>), (</*\>), (</\>), decode, null)
import Aeson.Encode ((>$<), (>/\<), encode, null)
import Control.Lazy (defer)
import Data.Generic.Rep (class Generic)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Newtype (class Newtype, unwrap, wrap)
import Data.Op (Op(Op))
import Data.Tuple.Nested ((/\))
import Types.Scripts (MintingPolicy, Validator)
import Aeson as Aeson
import Aeson.Decode as D
import Aeson.Encode as E
import Data.Map as Map

newtype RecordWithPlutusScripts = RecordWithPlutusScripts
  { mintingPolicy :: MintingPolicy
  , validator :: Validator
  }

instance EncodeAeson RecordWithPlutusScripts where
  encodeAeson' x = Aeson.encodeAeson' $ (defer \_ ->  E.encode $ unwrap >$< (E.record
                                                                           
                                                                              { mintingPolicy: E.value :: _ MintingPolicy
                                                                              , validator: E.value :: _ Validator
                                                                              }) ) x

instance DecodeAeson RecordWithPlutusScripts where
  decodeAeson = defer \_ -> D.decode $ (RecordWithPlutusScripts <$> D.record "RecordWithPlutusScripts"
      { mintingPolicy: D.value :: _ MintingPolicy
      , validator: D.value :: _ Validator
      })

derive instance Generic RecordWithPlutusScripts _

derive instance Newtype RecordWithPlutusScripts _
